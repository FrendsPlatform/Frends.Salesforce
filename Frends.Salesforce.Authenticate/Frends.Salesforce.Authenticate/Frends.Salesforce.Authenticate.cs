namespace Frends.Salesforce.Authenticate;

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.IO;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;
using Frends.Salesforce.Authenticate.Definitions;
using Newtonsoft.Json.Linq;

/// <summary>
/// Salesforce Task.
/// </summary>
public static class Salesforce
{
    /// <summary>
    /// Frends Task for retrieving an access token for a Salesforce user using the provided input parameters.
    /// [Documentation](https://tasks.frends.com/tasks/frends-tasks/Frends.Salesforce.Authenticate)
    /// </summary>
    /// <param name="input">Input parameters including login details.</param>
    /// <param name="cancellationToken">Token generated by Frends to stop this task.</param>
    /// <returns>Object { bool Success, string accessToken }</returns>
    public static async Task<Result> Authenticate([PropertyTab] Input input, CancellationToken cancellationToken)
    {
        var accessToken = await GetAccessTokenAsync(input, cancellationToken);
        return new Result(accessToken, true);
    }

    /// <summary>
    /// Asynchronously obtains an access token from Salesforce using the provided authentication parameters.
    /// </summary>
    /// <param name="authParams">Authentication parameters including login URL, client ID, client secret, username, and password with security token.</param>
    /// <param name="cancellationToken">Token to cancel the task if needed.</param>
    /// <returns>Access token as a string.</returns>
    public static async Task<string> GetAccessTokenAsync(Input authParams, CancellationToken cancellationToken)
    {
        if (authParams == null)
        {
            throw new ArgumentNullException(nameof(authParams), "Input cannot be null");
        }

        var requestUrl = authParams.LoginUrl;

        var formData = new Dictionary<string, string>
        {
            { "grant_type", "password" },
            { "client_id", authParams.ClientId },
            { "client_secret", authParams.ClientSecret },
            { "username", authParams.Username },
            { "password", $"{authParams.Password}{authParams.SecurityToken}" },
        };

        using (var httpClient = new HttpClient())
        {
            var content = new FormUrlEncodedContent(formData);

            HttpResponseMessage response = await httpClient.PostAsync(requestUrl, content, cancellationToken);

            if (response.IsSuccessStatusCode)
            {
                string responseBody = await response.Content.ReadAsStringAsync();
                var jsonResponse = JObject.Parse(responseBody);
                return jsonResponse["access_token"].ToString();
            }
            else
            {
                throw new HttpRequestException($"Failed to authenticate with Salesforce. Status code: {response.StatusCode}, Reason: {response.ReasonPhrase}");
            }
        }
    }
}
